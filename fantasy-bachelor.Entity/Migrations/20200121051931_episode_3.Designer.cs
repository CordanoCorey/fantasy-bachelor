// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using fantasy_bachelor.Entity.Context;

namespace fantasy_bachelor.Entity.Migrations
{
    [DbContext(typeof(FantasyBachelorContext))]
    [Migration("20200121051931_episode_3")]
    partial class episode_3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim","Auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim","Auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProviderKey", "LoginProvider");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin","Auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole","Auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "Value", "LoginProvider");

                    b.ToTable("UserToken","Auth");
                });

            modelBuilder.Entity("fantasy_bachelor.Entity.DataClasses.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role","Auth");
                });

            modelBuilder.Entity("fantasy_bachelor.Entity.DataClasses.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User","Auth");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f605120f-716d-40c3-9dbd-8ff473410823",
                            Email = "gelbaughcm@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "System",
                            LastName = "Administrator",
                            LockoutEnabled = false,
                            NormalizedEmail = "gelbaughcm@gmail.com",
                            NormalizedUserName = "gelbaughcm@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dfafd561-8cef-40ad-8c7a-339dc67529d0",
                            TwoFactorEnabled = false,
                            UserName = "gelbaughcm@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f605120f-716d-40c3-9dbd-8ff473410823",
                            Email = "corey@cordanosports.com",
                            EmailConfirmed = false,
                            FirstName = "Corey",
                            LastName = "Gelbaugh",
                            LockoutEnabled = false,
                            NormalizedEmail = "corey@cordanosports.com",
                            NormalizedUserName = "corey@cordanosports.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dfafd561-8cef-40ad-8c7a-339dc67529d0",
                            TwoFactorEnabled = false,
                            UserName = "corey@cordanosports.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "jbrent21@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Julie",
                            LastName = "Gelbaugh",
                            LockoutEnabled = false,
                            NormalizedEmail = "jbrent21@gmail.com",
                            NormalizedUserName = "jbrent21@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "jbrent21@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "es2531@ymail.com",
                            EmailConfirmed = false,
                            FirstName = "Evan",
                            LastName = "Simon",
                            LockoutEnabled = false,
                            NormalizedEmail = "es2531@ymail.com",
                            NormalizedUserName = "es2531@ymail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "es2531@ymail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "maryzell4@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mary",
                            LastName = "Zell",
                            LockoutEnabled = false,
                            NormalizedEmail = "maryzell4@gmail.com",
                            NormalizedUserName = "maryzell4@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "maryzell4@gmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "andreamariko1k@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Andrea",
                            LastName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "andreamariko1k@yahoo.com",
                            NormalizedUserName = "andreamariko1k@yahoo.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "andreamariko1k@yahoo.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "skyelee91@icloud.com",
                            EmailConfirmed = false,
                            FirstName = "Skye",
                            LastName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "skyelee91@icloud.com",
                            NormalizedUserName = "skyelee91@icloud.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "skyelee91@icloud.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "janmcmahan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jan",
                            LastName = "McMahan",
                            LockoutEnabled = false,
                            NormalizedEmail = "janmcmahan@gmail.com",
                            NormalizedUserName = "janmcmahan@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "janmcmahan@gmail.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "jeffs99285@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jeff",
                            LastName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "jeffs99285@gmail.com",
                            NormalizedUserName = "jeffs99285@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "jeffs99285@gmail.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "deschenmann@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Denise",
                            LastName = "Eschenmann",
                            LockoutEnabled = false,
                            NormalizedEmail = "deschenmann@gmail.com",
                            NormalizedUserName = "deschenmann@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "deschenmann@gmail.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "ceschenman19@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Cara",
                            LastName = "Eschenmann",
                            LockoutEnabled = false,
                            NormalizedEmail = "ceschenman19@gmail.com",
                            NormalizedUserName = "ceschenman19@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "ceschenman19@gmail.com"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "kwoy1508@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Kyleigh",
                            LastName = "Woy",
                            LockoutEnabled = false,
                            NormalizedEmail = "kwoy1508@yahoo.com",
                            NormalizedUserName = "kwoy1508@yahoo.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "kwoy1508@yahoo.com"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "kabrent51@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Kelly",
                            LastName = "Brent",
                            LockoutEnabled = false,
                            NormalizedEmail = "kabrent51@gmail.com",
                            NormalizedUserName = "kabrent51@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "kabrent51@gmail.com"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "er1293@messiah.edu",
                            EmailConfirmed = false,
                            FirstName = "Emily",
                            LastName = "Reisinger",
                            LockoutEnabled = false,
                            NormalizedEmail = "er1293@messiah.edu",
                            NormalizedUserName = "er1293@messiah.edu",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "er1293@messiah.edu"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "mw681275@sju.edu",
                            EmailConfirmed = false,
                            FirstName = "Maddie",
                            LastName = "Wargins",
                            LockoutEnabled = false,
                            NormalizedEmail = "mw681275@sju.edu",
                            NormalizedUserName = "mw681275@sju.edu",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "mw681275@sju.edu"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "lydiaphelan1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Lydia",
                            LastName = "Phelan",
                            LockoutEnabled = false,
                            NormalizedEmail = "lydiaphelan1@gmail.com",
                            NormalizedUserName = "lydiaphelan1@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "lydiaphelan1@gmail.com"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "kylie.mcmahan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Kylie",
                            LastName = "McMahan",
                            LockoutEnabled = false,
                            NormalizedEmail = "kylie.mcmahan@gmail.com",
                            NormalizedUserName = "kylie.mcmahan@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "kylie.mcmahan@gmail.com"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "keirakapner03@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Keira",
                            LastName = "Kapner",
                            LockoutEnabled = false,
                            NormalizedEmail = "keirakapner03@gmail.com",
                            NormalizedUserName = "keirakapner03@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "keirakapner03@gmail.com"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "rkbrent1111@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Katelin",
                            LastName = "Brent",
                            LockoutEnabled = false,
                            NormalizedEmail = "rkbrent1111@gmail.com",
                            NormalizedUserName = "rkbrent1111@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "rkbrent1111@gmail.com"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "t_bear25@icloud.com",
                            EmailConfirmed = false,
                            FirstName = "Tyler",
                            LastName = "Bear",
                            LockoutEnabled = false,
                            NormalizedEmail = "t_bear25@icloud.com",
                            NormalizedUserName = "t_bear25@icloud.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "t_bear25@icloud.com"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "nkroof@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Gram",
                            LastName = "Roof",
                            LockoutEnabled = false,
                            NormalizedEmail = "nkroof@yahoo.com",
                            NormalizedUserName = "nkroof@yahoo.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "nkroof@yahoo.com"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "felecia.williamson@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Felecia",
                            LastName = "Williamson",
                            LockoutEnabled = false,
                            NormalizedEmail = "felecia.williamson@gmail.com",
                            NormalizedUserName = "felecia.williamson@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "felecia.williamson@gmail.com"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "mxr8@pct.edu",
                            EmailConfirmed = false,
                            FirstName = "Michayla",
                            LastName = "Roberts",
                            LockoutEnabled = false,
                            NormalizedEmail = "mxr8@pct.edu",
                            NormalizedUserName = "mxr8@pct.edu",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "mxr8@pct.edu"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "cnkford18@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Chad",
                            LastName = "Kendrick",
                            LockoutEnabled = false,
                            NormalizedEmail = "cnkford18@yahoo.com",
                            NormalizedUserName = "cnkford18@yahoo.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "cnkford18@yahoo.com"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "taberangela@me.com",
                            EmailConfirmed = false,
                            FirstName = "Angela",
                            LastName = "Taber",
                            LockoutEnabled = false,
                            NormalizedEmail = "taberangela@me.com",
                            NormalizedUserName = "taberangela@me.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "taberangela@me.com"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "cgcostalas@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Courtney",
                            LastName = "Costalas",
                            LockoutEnabled = false,
                            NormalizedEmail = "cgcostalas@gmail.com",
                            NormalizedUserName = "cgcostalas@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "cgcostalas@gmail.com"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "bmorgan16@embarqmail.com",
                            EmailConfirmed = false,
                            FirstName = "Beth",
                            LastName = "Morgan",
                            LockoutEnabled = false,
                            NormalizedEmail = "bmorgan16@embarqmail.com",
                            NormalizedUserName = "bmorgan16@embarqmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "bmorgan16@embarqmail.com"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "kmp18@pct.edu",
                            EmailConfirmed = false,
                            FirstName = "Kaitlin",
                            LastName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "kmp18@pct.edu",
                            NormalizedUserName = "kmp18@pct.edu",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "kmp18@pct.edu"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "amanda.benfer@yahoo.com",
                            EmailConfirmed = false,
                            FirstName = "Amanda",
                            LastName = "Benfer",
                            LockoutEnabled = false,
                            NormalizedEmail = "amanda.benfer@yahoo.com",
                            NormalizedUserName = "amanda.benfer@yahoo.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "amanda.benfer@yahoo.com"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "ipeleg@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Peleg",
                            LastName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "ipeleg@hotmail.com",
                            NormalizedUserName = "ipeleg@hotmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "ipeleg@hotmail.com"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "addieorndorff@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Addie",
                            LastName = "Orndorff",
                            LockoutEnabled = false,
                            NormalizedEmail = "addieorndorff@gmail.com",
                            NormalizedUserName = "addieorndorff@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "addieorndorff@gmail.com"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "rmo104@psu.edu",
                            EmailConfirmed = false,
                            FirstName = "Bob",
                            LastName = "Orndorff",
                            LockoutEnabled = false,
                            NormalizedEmail = "rmo104@psu.edu",
                            NormalizedUserName = "rmo104@psu.edu",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "rmo104@psu.edu"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "megangodfrey97@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Megan",
                            LastName = "Godfrey",
                            LockoutEnabled = false,
                            NormalizedEmail = "megangodfrey97@gmail.com",
                            NormalizedUserName = "megangodfrey97@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "megangodfrey97@gmail.com"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "donna@dgodfreylaw.com",
                            EmailConfirmed = false,
                            FirstName = "Donna",
                            LastName = "Godfrey",
                            LockoutEnabled = false,
                            NormalizedEmail = "donna@dgodfreylaw.com",
                            NormalizedUserName = "donna@dgodfreylaw.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "donna@dgodfreylaw.com"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "morgan.ciecierski10@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Morgan",
                            LastName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "morgan.ciecierski10@gmail.com",
                            NormalizedUserName = "morgan.ciecierski10@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "morgan.ciecierski10@gmail.com"
                        });
                });

            modelBuilder.Entity("fantasy_bachelor.Entity.DataClasses.Contestant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Hometown")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Contestant","Common");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 24,
                            Bio = "",
                            Hometown = "",
                            Name = "Alayah",
                            Profession = ""
                        },
                        new
                        {
                            Id = 2,
                            Age = 27,
                            Bio = "",
                            Hometown = "",
                            Name = "Alexa",
                            Profession = ""
                        },
                        new
                        {
                            Id = 3,
                            Age = 27,
                            Bio = "",
                            Hometown = "",
                            Name = "Avonlea",
                            Profession = ""
                        },
                        new
                        {
                            Id = 4,
                            Age = 26,
                            Bio = "",
                            Hometown = "",
                            Name = "Courtney",
                            Profession = ""
                        },
                        new
                        {
                            Id = 5,
                            Age = 23,
                            Bio = "",
                            Hometown = "",
                            Name = "Deandra",
                            Profession = ""
                        },
                        new
                        {
                            Id = 6,
                            Age = 23,
                            Bio = "",
                            Hometown = "",
                            Name = "Eunice",
                            Profession = ""
                        },
                        new
                        {
                            Id = 7,
                            Age = 23,
                            Bio = "",
                            Hometown = "",
                            Name = "Hannah Ann",
                            Profession = ""
                        },
                        new
                        {
                            Id = 8,
                            Age = 26,
                            Bio = "",
                            Hometown = "",
                            Name = "Jade",
                            Profession = ""
                        },
                        new
                        {
                            Id = 9,
                            Age = 25,
                            Bio = "",
                            Hometown = "",
                            Name = "Jasmine",
                            Profession = ""
                        },
                        new
                        {
                            Id = 10,
                            Age = 22,
                            Bio = "",
                            Hometown = "",
                            Name = "Jenna",
                            Profession = ""
                        },
                        new
                        {
                            Id = 11,
                            Age = 28,
                            Bio = "",
                            Hometown = "",
                            Name = "Katrina",
                            Profession = ""
                        },
                        new
                        {
                            Id = 12,
                            Age = 28,
                            Bio = "",
                            Hometown = "",
                            Name = "Kelley",
                            Profession = ""
                        },
                        new
                        {
                            Id = 13,
                            Age = 28,
                            Bio = "",
                            Hometown = "",
                            Name = "Kelsey",
                            Profession = ""
                        },
                        new
                        {
                            Id = 14,
                            Age = 23,
                            Bio = "",
                            Hometown = "",
                            Name = "Kiarra",
                            Profession = ""
                        },
                        new
                        {
                            Id = 15,
                            Age = 25,
                            Bio = "",
                            Hometown = "",
                            Name = "Kylie",
                            Profession = ""
                        },
                        new
                        {
                            Id = 16,
                            Age = 26,
                            Bio = "",
                            Hometown = "",
                            Name = "Lauren",
                            Profession = ""
                        },
                        new
                        {
                            Id = 17,
                            Age = 26,
                            Bio = "",
                            Hometown = "",
                            Name = "Lexi",
                            Profession = ""
                        },
                        new
                        {
                            Id = 18,
                            Age = 23,
                            Bio = "",
                            Hometown = "",
                            Name = "Madison",
                            Profession = ""
                        },
                        new
                        {
                            Id = 19,
                            Age = 23,
                            Bio = "",
                            Hometown = "",
                            Name = "Maurissa",
                            Profession = ""
                        },
                        new
                        {
                            Id = 20,
                            Age = 26,
                            Bio = "",
                            Hometown = "",
                            Name = "Megan",
                            Profession = ""
                        },
                        new
                        {
                            Id = 21,
                            Age = 22,
                            Bio = "",
                            Hometown = "",
                            Name = "Mykenna",
                            Profession = ""
                        },
                        new
                        {
                            Id = 22,
                            Age = 31,
                            Bio = "",
                            Hometown = "",
                            Name = "Natasha",
                            Profession = ""
                        },
                        new
                        {
                            Id = 23,
                            Age = 23,
                            Bio = "",
                            Hometown = "",
                            Name = "Payton",
                            Profession = ""
                        },
                        new
                        {
                            Id = 24,
                            Age = 24,
                            Bio = "",
                            Hometown = "",
                            Name = "Sarah",
                            Profession = ""
                        },
                        new
                        {
                            Id = 25,
                            Age = 27,
                            Bio = "",
                            Hometown = "",
                            Name = "Savannah",
                            Profession = ""
                        },
                        new
                        {
                            Id = 26,
                            Age = 27,
                            Bio = "",
                            Hometown = "",
                            Name = "Shiann",
                            Profession = ""
                        },
                        new
                        {
                            Id = 27,
                            Age = 24,
                            Bio = "",
                            Hometown = "",
                            Name = "Sydney",
                            Profession = ""
                        },
                        new
                        {
                            Id = 28,
                            Age = 24,
                            Bio = "",
                            Hometown = "",
                            Name = "Tammy",
                            Profession = ""
                        },
                        new
                        {
                            Id = 29,
                            Age = 25,
                            Bio = "",
                            Hometown = "",
                            Name = "Victoria F.",
                            Profession = ""
                        },
                        new
                        {
                            Id = 30,
                            Age = 27,
                            Bio = "",
                            Hometown = "",
                            Name = "Victoria P.",
                            Profession = ""
                        });
                });

            modelBuilder.Entity("fantasy_bachelor.Entity.DataClasses.ContestantSeasonXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContestantId")
                        .HasColumnType("int");

                    b.Property<int?>("Finish")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContestantId");

                    b.HasIndex("SeasonId");

                    b.ToTable("ContestantSeason_xref","Common");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContestantId = 1,
                            Finish = 16,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 2,
                            ContestantId = 2,
                            Finish = 16,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 3,
                            ContestantId = 3,
                            Finish = 20,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 4,
                            ContestantId = 4,
                            Finish = 20,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 5,
                            ContestantId = 5,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 6,
                            ContestantId = 6,
                            Finish = 20,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 7,
                            ContestantId = 7,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 8,
                            ContestantId = 8,
                            Finish = 20,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 9,
                            ContestantId = 9,
                            Finish = 16,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 10,
                            ContestantId = 10,
                            Finish = 20,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 11,
                            ContestantId = 11,
                            Finish = 20,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 12,
                            ContestantId = 12,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 13,
                            ContestantId = 13,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 14,
                            ContestantId = 14,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 15,
                            ContestantId = 15,
                            Finish = 20,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 16,
                            ContestantId = 16,
                            Finish = 20,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 17,
                            ContestantId = 17,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 18,
                            ContestantId = 18,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 19,
                            ContestantId = 19,
                            Finish = 20,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 20,
                            ContestantId = 20,
                            Finish = 20,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 21,
                            ContestantId = 21,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 22,
                            ContestantId = 22,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 23,
                            ContestantId = 23,
                            Finish = 20,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 24,
                            ContestantId = 24,
                            Finish = 16,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 25,
                            ContestantId = 25,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 26,
                            ContestantId = 26,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 27,
                            ContestantId = 27,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 28,
                            ContestantId = 28,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 29,
                            ContestantId = 29,
                            SeasonId = 1
                        },
                        new
                        {
                            Id = 30,
                            ContestantId = 30,
                            SeasonId = 1
                        });
                });

            modelBuilder.Entity("fantasy_bachelor.Entity.DataClasses.FunFact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContestantId")
                        .HasColumnType("int");

                    b.Property<int>("Description")
                        .HasColumnType("int")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("ContestantId");

                    b.ToTable("FunFact","Common");
                });

            modelBuilder.Entity("fantasy_bachelor.Entity.DataClasses.Ranking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContestantSeasonId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContestantSeasonId");

                    b.HasIndex("UserId");

                    b.ToTable("Ranking","Common");
                });

            modelBuilder.Entity("fantasy_bachelor.Entity.DataClasses.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("SeasonTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SeasonTypeId");

                    b.ToTable("Season","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2020, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Season 24",
                            SeasonTypeId = 1,
                            Sort = 1,
                            StartDate = new DateTime(2020, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("fantasy_bachelor.Entity.DataClasses.SeasonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SeasonType","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "Bachelor",
                            Sort = 1
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Bachelorette",
                            Sort = 2
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "Bachelor Pad",
                            Sort = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("fantasy_bachelor.Entity.DataClasses.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("fantasy_bachelor.Entity.DataClasses.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("fantasy_bachelor.Entity.DataClasses.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("fantasy_bachelor.Entity.DataClasses.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fantasy_bachelor.Entity.DataClasses.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("fantasy_bachelor.Entity.DataClasses.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fantasy_bachelor.Entity.DataClasses.ContestantSeasonXref", b =>
                {
                    b.HasOne("fantasy_bachelor.Entity.DataClasses.Contestant", "Contestant")
                        .WithMany("Seasons")
                        .HasForeignKey("ContestantId")
                        .HasConstraintName("FK_ContestantSeason_Contestant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fantasy_bachelor.Entity.DataClasses.Season", "Season")
                        .WithMany("Contestants")
                        .HasForeignKey("SeasonId")
                        .HasConstraintName("FK_ContestantSeason_Season")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fantasy_bachelor.Entity.DataClasses.FunFact", b =>
                {
                    b.HasOne("fantasy_bachelor.Entity.DataClasses.Contestant", "Contestant")
                        .WithMany("FunFacts")
                        .HasForeignKey("ContestantId")
                        .HasConstraintName("FK_FunFact_Contestant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fantasy_bachelor.Entity.DataClasses.Ranking", b =>
                {
                    b.HasOne("fantasy_bachelor.Entity.DataClasses.ContestantSeasonXref", "ContestantSeason")
                        .WithMany("Rankings")
                        .HasForeignKey("ContestantSeasonId")
                        .HasConstraintName("FK_Ranking_ContestantSeason")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fantasy_bachelor.Entity.DataClasses.ApplicationUser", "User")
                        .WithMany("RankingUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Ranking_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fantasy_bachelor.Entity.DataClasses.Season", b =>
                {
                    b.HasOne("fantasy_bachelor.Entity.DataClasses.SeasonType", "SeasonType")
                        .WithMany("Seasons")
                        .HasForeignKey("SeasonTypeId")
                        .HasConstraintName("FK_Season_SeasonType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
